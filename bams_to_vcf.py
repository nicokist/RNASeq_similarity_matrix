#!/usr/bin/env python
# bams_to_vcf 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# See https://wiki.dnanexus.com/Developer-Portal for documentation and
# tutorials on how to modify this file.
#
# DNAnexus Python Bindings (dxpy) documentation:
#   http://autodoc.dnanexus.com/bindings/python/current/

import os
import dxpy
import subprocess

@dxpy.entry_point('main')
def main(bam_files):

    # The following line(s) initialize your data object inputs on the platform
    # into dxpy.DXDataObject instances that you can start using immediately.
    bam_files = [dxpy.DXFile(item) for item in bam_files]
    # The following line(s) download your file inputs to the local file system
    # using variable names for the filenames.
    os.mkdir('bam_files')
    for i, f in enumerate(bam_files):
        f_filename= f.describe(fields={'name'})['name']
        dxpy.download_dxfile(f.get_id(), 'bam_files/' + f_filename)


    def call_and_check(command):
        print('Running: "'+command+'"')        
        ret = subprocess.call(command, shell=True)
        print('Returned: %d' % ret)
        if(ret!=0): raise ValueError('non-zero return code')    

    call_and_check("find bam_files/*.bam | xargs -P 30 -n 1 /samtools index")
    call_and_check("/samtools merge --threads 30 -r -R 1 bam_files.merged_chr1.bam bam_files/*.bam")
    call_and_check("/samtools view -H bam_files.merged_chr1.bam > bam_files.merged_chr1.new_header")
    call_and_check("find bam_files/*.bam | /generate_RGs.py >> bam_files.merged_chr1.new_header")
    call_and_check("/samtools reheader bam_files.merged_chr1.new_header bam_files.merged_chr1.bam > bam_files.merged_chr1.header_withRG.bam")
#   call_and_check('java -jar /gatk-package-4.0.11.0-local.jar MarkDuplicates --INPUT bam_files.merged_chr1.header_withRG.bam --OUTPUT bam_files.merged_chr1.header_withRG.MarkDuplicates.bam --CREATE_INDEX -M MarkDuplicates.metrics')
    call_and_check('java -jar /gatk-package-4.0.11.0-local.jar MarkDuplicates --INPUT bam_files.merged_chr1.header_withRG.bam --OUTPUT bam_files.merged_chr1.header_withRG.MarkDuplicates.bam --CREATE_INDEX -M MarkDuplicates.metrics --VALIDATION_STRINGENCY LENIENT')

    call_and_check("gzip -d /Homo_sapiens.GRCh38.dna_sm.primary_assembly.fa.gz")


    #samtools faidx output (Homo_sapiens.GRCh38.dna_sm.primary_assembly.fa.fai) is supplied in resources.

    # ~/tools/freebayes/scripts/fasta_generate_regions.py ~/temp/Homo_sapiens.GRCh38.dna_sm.primary_assembly.fa 100000 |  grep '^1\:'  > ~/temp/
    # presupplied as chr1_regions in resources directory.


    call_and_check(
        """ulimit -n 160000; 
        cd /freebayes/scripts; 
        ./freebayes-parallel /chr1_regions 30 --use-best-n-alleles 4 -f /Homo_sapiens.GRCh38.dna_sm.primary_assembly.fa -b /home/dnanexus/bam_files.merged_chr1.header_withRG.MarkDuplicates.bam > /home/dnanexus/bam_files.merged_chr1.header_withRG.MarkDuplicates.freebayes_best_4_alleles.vcf;
        """)





    # The following line(s) use the Python bindings to upload your file outputs
    # after you have created them on the local file system.  It assumes that you
    # have used the output field name for the filename for each output, but you
    # can change that behavior to suit your needs.

    vcf_file = dxpy.upload_local_file("/home/dnanexus/bam_files.merged_chr1.header_withRG.MarkDuplicates.freebayes_best_4_alleles.vcf")

    # The following line fills in some basic dummy output and assumes
    # that you have created variables to represent your output with
    # the same name as your output fields.

    output = {}
    output["vcf_file"] = dxpy.dxlink(vcf_file)

    return output

dxpy.run()
