#!/usr/bin/env python
# RNASeq_sequence_similarity_matrix 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# See https://wiki.dnanexus.com/Developer-Portal for documentation and
# tutorials on how to modify this file.
#
# DNAnexus Python Bindings (dxpy) documentation:
#   http://autodoc.dnanexus.com/bindings/python/current/

import os
import dxpy
import subprocess

def call_and_check(command):
    print('Running: "'+command+'"')        
    ret = subprocess.call(command, shell=True)
    print('Returned: %d' % ret)
    if(ret!=0): raise ValueError('non-zero return code')   


@dxpy.entry_point('main')
def main(vcf_file):

    # The following line(s) initialize your data object inputs on the platform
    # into dxpy.DXDataObject instances that you can start using immediately.

    vcf_file = dxpy.DXFile(vcf_file)

    # The following line(s) download your file inputs to the local file system
    # using variable names for the filenames.

    dxpy.download_dxfile(vcf_file.get_id(), "vcf_file")

    # Fill in your application code here.

    call_and_check("/vcffilter -f 'QUAL > 20' vcf_file > vcf_file.QUAL_GT_20.vcf")
    call_and_check("grep '^#' vcf_file.QUAL_GT_20.vcf > vcf_file.QUAL_GT_20.common_snps_only.vcf")
    call_and_check("/bedtools intersect -a vcf_file.QUAL_GT_20.vcf -b /00-common_all.vcf.gz -wa >> vcf_file.QUAL_GT_20.common_snps_only.vcf")
    call_and_check("R CMD BATCH /vcf_to_similarity_matrix.R")

    os.rename('sequence_similarity.pdf', 'sequence_similarity_pdf')
    # The following line(s) use the Python bindings to upload your file outputs
    # after you have created them on the local file system.  It assumes that you
    # have used the output field name for the filename for each output, but you
    # can change that behavior to suit your needs.

    sequence_similarity_pdf = dxpy.upload_local_file("sequence_similarity_pdf")
    sequence_similarity_csv = dxpy.upload_local_file("sequence_similarity_csv")

    # The following line fills in some basic dummy output and assumes
    # that you have created variables to represent your output with
    # the same name as your output fields.

    output = {}
    output["sequence_similarity_pdf"] = dxpy.dxlink(sequence_similarity_pdf)
    output["sequence_similarity_csv"] = dxpy.dxlink(sequence_similarity_csv)

    return output

dxpy.run()
